mutation CreateNewModel {
  createModel(name: "MNIST_MinimalUNet") {
    id
    name
  }
}

mutation AppendConvEncoder {
  appendToModuleGraph(
    layer_config: {
      type: "conv2d"
      conv2d: {
        name: "ConvEncoder"
        in_channels: 1 
        out_channels: 32
        kernel_size: [3, 3]
        padding: [1, 1]
      }
    }
  ) {
    layers { id, name, type, ... on Conv2dLayerConfig { in_channels, out_channels, kernel_size, padding } }
    edges { source_id, target_ids }
  }
}

mutation AppendMaxPoolEncoder {
  appendToModuleGraph(
    layer_config: {
      type: "maxpool2d"
      maxpool2d: {
        name: "MaxPoolEncoder"
        kernel_size: [2, 2]
        stride: [2, 2]
      }
    }
  ) {
    layers { id, name, type, ... on MaxPool2dLayerConfig { kernel_size, stride } }
    edges { source_id, target_ids }
  }
}

mutation AppendConvDeepEncoder {
  appendToModuleGraph(
    layer_config: {
      type: "conv2d"
      conv2d: {
        name: "ConvDeepEncoder"
        in_channels: 32 
        out_channels: 64
        kernel_size: [3, 3]
        padding: [1, 1]
      }
    }
  ) {
    layers { id, name, type, ... on Conv2dLayerConfig { in_channels, out_channels, kernel_size, padding } }
    edges { source_id, target_ids }
  }
}

mutation AppendConvTransposeDecoder {
  appendToModuleGraph(
    layer_config: {
      type: "convtranspose2d"
      convtranspose2d: {
        name: "ConvTransposeDecoder"
        in_channels: 64 
        out_channels: 32
        kernel_size: [2, 2]
        stride: [2, 2] 
      }
    }
  ) {
    layers { id, name, type, ... on ConvTranspose2dLayerConfig { in_channels, out_channels, kernel_size, stride, output_padding } }
    edges { source_id, target_ids }
  }
}

mutation AppendCatLayer {
  appendToModuleGraph(
    layer_config: {
      type: "cat"
      cat: {
        name: "SkipConnectionCat"
        dimension: 1 # Concatenate along the channel dimension (index 1 for NCHW)
      }
    }
  ) {
    layers { id, name, type, ... on CatLayerConfig { dimension } }
    edges { source_id, target_ids }
  }
}

mutation AppendConvDecoderFinal {
  appendToModuleGraph(
    layer_config: {
      type: "conv2d"
      conv2d: {
        name: "ConvDecoderFinal"
        in_channels: 64 # 32 (from ConvEncoder skip) + 32 (from ConvTransposeDecoder)
        out_channels: 16
        kernel_size: [3, 3]
        padding: [1, 1]
      }
    }
  ) {
    layers { id, name, type, ... on Conv2dLayerConfig { in_channels, out_channels, kernel_size, padding } }
    edges { source_id, target_ids }
  }
}

mutation AppendFlattenLayer {
  appendToModuleGraph(
    layer_config: {
      type: "flatten"
      flatten: {
        name: "FlattenOutput"
        start_dim: 1
      }
    }
  ) {
    layers { id, name, type, ... on FlattenLayerConfig { start_dim, end_dim } }
    edges { source_id, target_ids }
  }
}

mutation AppendLinearFinal {
  appendToModuleGraph(
    layer_config: {
      type: "linear"
      linear: {
        name: "LinearClassifier"
        in_features: 12544 # Calculated assuming MNIST (28x28) and the chain
        out_features: 10 # For MNIST classes
      }
    }
  ) {
    layers { id, name, type, ... on LinearLayerConfig { in_features, out_features } }
    edges { source_id, target_ids }
  }
}

# 3. Connect Layers for MNIST Cat Test Graph (CORRECTED CONNECTIONS)
# Use the actual IDs you copied from the Append mutations.

mutation ConnectConvEncToPoolEnc {
  connectInModuleGraph(
    source_layer_id: "861e2550-5291-423b-9cb5-a33230a3c227" # ConvEncoder
    target_layer_id: "46a26d04-3512-48f4-b1f4-487692ea636d" # MaxPoolEncoder
  ) { layers { id, name }, edges { source_id, target_ids } }
}

mutation ConnectPoolEncToConvDeep {
  connectInModuleGraph(
    source_layer_id: "46a26d04-3512-48f4-b1f4-487692ea636d" # MaxPoolEncoder
    target_layer_id: "6bae0dfa-6c85-4304-a144-a2883f58221c" # ConvDeepEncoder 
  ) { layers { id, name }, edges { source_id, target_ids } }
}

mutation ConnectConvDeepToConvTrans {
  connectInModuleGraph(
    source_layer_id: "f13399c7-7e53-4ead-ba8c-9fad01f9c311" # ConvDeepEncoder
    target_layer_id: "d3005918-f92b-407f-9ce4-66282fd76cd5" # ConvTransposeDecoder
  ) { layers { id, name }, edges { source_id, target_ids } }
}

# --- Connect to the Cat Layer (Multiple Inputs) ---
mutation ConnectConvEncToCat {
  connectInModuleGraph(
    source_layer_id: "10cb5b30-101d-4828-9c34-9236ce243c2a" # ConvEncoder (Skip connection)
    target_layer_id: "66021302-6bde-4f65-aa2c-930f3cb0d3d0" # SkipConnectionCat
  ) { layers { id, name }, edges { source_id, target_ids } }
}

mutation ConnectConvTransToCat {
  connectInModuleGraph(
    source_layer_id: "491c16f3-73c2-4ba7-b02c-890656581e94" # ConvTransposeDecoder
    target_layer_id: "66021302-6bde-4f65-aa2c-930f3cb0d3d0" # SkipConnectionCat
  ) { layers { id, name }, edges { source_id, target_ids } }
}
# --- End Cat Connections ---

mutation ConnectCatToConvDecoder {
  connectInModuleGraph(
    source_layer_id: "66021302-6bde-4f65-aa2c-930f3cb0d3d0" # SkipConnectionCat
    target_layer_id: "abfc4236-fdea-494b-a81e-cf596892d09c" # ConvDecoderFinal
  ) { layers { id, name }, edges { source_id, target_ids } }
}

mutation ConnectConvDecoderToFlatten {
  connectInModuleGraph(
    source_layer_id: "abfc4236-fdea-494b-a81e-cf596892d09c" # ConvDecoderFinal
    target_layer_id: "6df05571-a3be-40f9-abc5-45b56f306a41" # FlattenOutput
  ) { layers { id, name }, edges { source_id, target_ids } }
}

mutation ConnectFlattenToLinearFinal {
  connectInModuleGraph(
    source_layer_id: "6df05571-a3be-40f9-abc5-45b56f306a41" # FlattenOutput
    target_layer_id: "f1a4f370-2bc3-4d9c-bfe1-5bac25f4040f" # LinearClassifier
  ) { layers { id, name }, edges { source_id, target_ids } }
}


mutation ConstructAndVerifyCatGraph {
  buildModuleGraph{
    id
    name
    module_graph {
      layers { id, type, name }
      edges { source_id, target_ids }
      sorted 
    }
  }
}


# --- 5. Set Training Configuration for MNIST ---
mutation SetSGDTrainConfig {
  setTrainConfig(
    train_config: {
      epochs: 10
      optimizer: "sgd"
      optimizer_config: {
        lr: 0.01
        momentum: 0.9
        dampening: 0.0
        weight_decay: 0.0001
        nesterov: true
      }
      loss_function: "ce" # Cross-Entropy Loss for classification
    }
  ) {
    id
    name
    train_config { epochs, optimizer, optimizer_config { lr }, loss_function }
  }
}

# --- 6. Set Dataset Configuration for MNIST ---
mutation SetMNISTDatasetConfig {
  setDataset(
    dataset_config: {
      name: "mnist" # Specify MNIST dataset
      shuffle: true
      split_length: [0.8, 0.2] # 80% train, 20% validation
      batch_size: 128
      mnist: { # Use mnist specific input
        root: "./data/mnist" # Directory to store MNIST data
        train: true
        download: true
        transform: ["ToTensor", "Normalize"] # Common transforms for MNIST
      }
    }
  ) {
    id
    name
    dataset_config { name, batch_size, split_length, shuffle, ... on MNISTDatasetConfig { root, train, download, transform } }
  }
}

# --- 7. Save the Model ---
# This mutation will save the current state of the model.
mutation SaveModel {
  saveModel 
}

# --- 8. Train the Model ---
# This initiates the training process.
mutation TrainModel {
  train() { # ACTION REQUIRED
    id
    name
    train_config { epochs }
    dataset_config { name }
  }
}

mutation DisconnectEdge {
  disconnectInModuleGraph(
    source_layer_id: "861e2550-5291-423b-9cb5-a33230a3c227" # ConvDeepEncoder
    target_layer_id: "46a26d04-3512-48f4-b1f4-487692ea636d" # ConvTransposeDecoder
  ) { layers { id, name }, edges { source_id, target_ids } }
}

# 6. Delete a Layer and Verify Updated Graph State
mutation DeleteLayer {
  deleteInModuleGraph(
    layer_id: "d3005918-f92b-407f-9ce4-66282fd76cd5" # ACTION REQUIRED
  ) {
    layers { id, name, type } # <--- Verify the layer is removed here
    edges { source_id, target_ids } # <--- Verify associated edges are removed here
    sorted
  }
}

mutation save {
  saveModel
}